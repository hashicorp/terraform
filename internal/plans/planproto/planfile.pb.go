// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: BUSL-1.1

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: planfile.proto

package planproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Mode describes the planning mode that created the plan.
type Mode int32

const (
	Mode_NORMAL       Mode = 0
	Mode_DESTROY      Mode = 1
	Mode_REFRESH_ONLY Mode = 2
)

// Enum value maps for Mode.
var (
	Mode_name = map[int32]string{
		0: "NORMAL",
		1: "DESTROY",
		2: "REFRESH_ONLY",
	}
	Mode_value = map[string]int32{
		"NORMAL":       0,
		"DESTROY":      1,
		"REFRESH_ONLY": 2,
	}
)

func (x Mode) Enum() *Mode {
	p := new(Mode)
	*p = x
	return p
}

func (x Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_planfile_proto_enumTypes[0].Descriptor()
}

func (Mode) Type() protoreflect.EnumType {
	return &file_planfile_proto_enumTypes[0]
}

func (x Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mode.Descriptor instead.
func (Mode) EnumDescriptor() ([]byte, []int) {
	return file_planfile_proto_rawDescGZIP(), []int{0}
}

// Action describes the type of action planned for an object.
// Not all action values are valid for all object types.
type Action int32

const (
	Action_NOOP               Action = 0
	Action_CREATE             Action = 1
	Action_READ               Action = 2
	Action_UPDATE             Action = 3
	Action_DELETE             Action = 5
	Action_DELETE_THEN_CREATE Action = 6
	Action_CREATE_THEN_DELETE Action = 7
	Action_FORGET             Action = 8
	Action_CREATE_THEN_FORGET Action = 9
)

// Enum value maps for Action.
var (
	Action_name = map[int32]string{
		0: "NOOP",
		1: "CREATE",
		2: "READ",
		3: "UPDATE",
		5: "DELETE",
		6: "DELETE_THEN_CREATE",
		7: "CREATE_THEN_DELETE",
		8: "FORGET",
		9: "CREATE_THEN_FORGET",
	}
	Action_value = map[string]int32{
		"NOOP":               0,
		"CREATE":             1,
		"READ":               2,
		"UPDATE":             3,
		"DELETE":             5,
		"DELETE_THEN_CREATE": 6,
		"CREATE_THEN_DELETE": 7,
		"FORGET":             8,
		"CREATE_THEN_FORGET": 9,
	}
)

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}

func (x Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action) Descriptor() protoreflect.EnumDescriptor {
	return file_planfile_proto_enumTypes[1].Descriptor()
}

func (Action) Type() protoreflect.EnumType {
	return &file_planfile_proto_enumTypes[1]
}

func (x Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action.Descriptor instead.
func (Action) EnumDescriptor() ([]byte, []int) {
	return file_planfile_proto_rawDescGZIP(), []int{1}
}

// ResourceInstanceActionReason sometimes provides some additional user-facing
// context for why a particular action was chosen for a resource instance.
// This is for user feedback only and never used to drive behavior during the
// subsequent apply step.
type ResourceInstanceActionReason int32

const (
	ResourceInstanceActionReason_NONE                              ResourceInstanceActionReason = 0
	ResourceInstanceActionReason_REPLACE_BECAUSE_TAINTED           ResourceInstanceActionReason = 1
	ResourceInstanceActionReason_REPLACE_BY_REQUEST                ResourceInstanceActionReason = 2
	ResourceInstanceActionReason_REPLACE_BECAUSE_CANNOT_UPDATE     ResourceInstanceActionReason = 3
	ResourceInstanceActionReason_DELETE_BECAUSE_NO_RESOURCE_CONFIG ResourceInstanceActionReason = 4
	ResourceInstanceActionReason_DELETE_BECAUSE_WRONG_REPETITION   ResourceInstanceActionReason = 5
	ResourceInstanceActionReason_DELETE_BECAUSE_COUNT_INDEX        ResourceInstanceActionReason = 6
	ResourceInstanceActionReason_DELETE_BECAUSE_EACH_KEY           ResourceInstanceActionReason = 7
	ResourceInstanceActionReason_DELETE_BECAUSE_NO_MODULE          ResourceInstanceActionReason = 8
	ResourceInstanceActionReason_REPLACE_BY_TRIGGERS               ResourceInstanceActionReason = 9
	ResourceInstanceActionReason_READ_BECAUSE_CONFIG_UNKNOWN       ResourceInstanceActionReason = 10
	ResourceInstanceActionReason_READ_BECAUSE_DEPENDENCY_PENDING   ResourceInstanceActionReason = 11
	ResourceInstanceActionReason_READ_BECAUSE_CHECK_NESTED         ResourceInstanceActionReason = 13
	ResourceInstanceActionReason_DELETE_BECAUSE_NO_MOVE_TARGET     ResourceInstanceActionReason = 12
)

// Enum value maps for ResourceInstanceActionReason.
var (
	ResourceInstanceActionReason_name = map[int32]string{
		0:  "NONE",
		1:  "REPLACE_BECAUSE_TAINTED",
		2:  "REPLACE_BY_REQUEST",
		3:  "REPLACE_BECAUSE_CANNOT_UPDATE",
		4:  "DELETE_BECAUSE_NO_RESOURCE_CONFIG",
		5:  "DELETE_BECAUSE_WRONG_REPETITION",
		6:  "DELETE_BECAUSE_COUNT_INDEX",
		7:  "DELETE_BECAUSE_EACH_KEY",
		8:  "DELETE_BECAUSE_NO_MODULE",
		9:  "REPLACE_BY_TRIGGERS",
		10: "READ_BECAUSE_CONFIG_UNKNOWN",
		11: "READ_BECAUSE_DEPENDENCY_PENDING",
		13: "READ_BECAUSE_CHECK_NESTED",
		12: "DELETE_BECAUSE_NO_MOVE_TARGET",
	}
	ResourceInstanceActionReason_value = map[string]int32{
		"NONE":                              0,
		"REPLACE_BECAUSE_TAINTED":           1,
		"REPLACE_BY_REQUEST":                2,
		"REPLACE_BECAUSE_CANNOT_UPDATE":     3,
		"DELETE_BECAUSE_NO_RESOURCE_CONFIG": 4,
		"DELETE_BECAUSE_WRONG_REPETITION":   5,
		"DELETE_BECAUSE_COUNT_INDEX":        6,
		"DELETE_BECAUSE_EACH_KEY":           7,
		"DELETE_BECAUSE_NO_MODULE":          8,
		"REPLACE_BY_TRIGGERS":               9,
		"READ_BECAUSE_CONFIG_UNKNOWN":       10,
		"READ_BECAUSE_DEPENDENCY_PENDING":   11,
		"READ_BECAUSE_CHECK_NESTED":         13,
		"DELETE_BECAUSE_NO_MOVE_TARGET":     12,
	}
)

func (x ResourceInstanceActionReason) Enum() *ResourceInstanceActionReason {
	p := new(ResourceInstanceActionReason)
	*p = x
	return p
}

func (x ResourceInstanceActionReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ResourceInstanceActionReason) Descriptor() protoreflect.EnumDescriptor {
	return file_planfile_proto_enumTypes[2].Descriptor()
}

func (ResourceInstanceActionReason) Type() protoreflect.EnumType {
	return &file_planfile_proto_enumTypes[2]
}

func (x ResourceInstanceActionReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ResourceInstanceActionReason.Descriptor instead.
func (ResourceInstanceActionReason) EnumDescriptor() ([]byte, []int) {
	return file_planfile_proto_rawDescGZIP(), []int{2}
}

// DeferredReason describes the reason why a resource instance change was
// deferred.
type DeferredReason int32

const (
	DeferredReason_INVALID                 DeferredReason = 0
	DeferredReason_INSTANCE_COUNT_UNKNOWN  DeferredReason = 1
	DeferredReason_RESOURCE_CONFIG_UNKNOWN DeferredReason = 2
	DeferredReason_PROVIDER_CONFIG_UNKNOWN DeferredReason = 3
	DeferredReason_ABSENT_PREREQ           DeferredReason = 4
	DeferredReason_DEFERRED_PREREQ         DeferredReason = 5
)

// Enum value maps for DeferredReason.
var (
	DeferredReason_name = map[int32]string{
		0: "INVALID",
		1: "INSTANCE_COUNT_UNKNOWN",
		2: "RESOURCE_CONFIG_UNKNOWN",
		3: "PROVIDER_CONFIG_UNKNOWN",
		4: "ABSENT_PREREQ",
		5: "DEFERRED_PREREQ",
	}
	DeferredReason_value = map[string]int32{
		"INVALID":                 0,
		"INSTANCE_COUNT_UNKNOWN":  1,
		"RESOURCE_CONFIG_UNKNOWN": 2,
		"PROVIDER_CONFIG_UNKNOWN": 3,
		"ABSENT_PREREQ":           4,
		"DEFERRED_PREREQ":         5,
	}
)

func (x DeferredReason) Enum() *DeferredReason {
	p := new(DeferredReason)
	*p = x
	return p
}

func (x DeferredReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeferredReason) Descriptor() protoreflect.EnumDescriptor {
	return file_planfile_proto_enumTypes[3].Descriptor()
}

func (DeferredReason) Type() protoreflect.EnumType {
	return &file_planfile_proto_enumTypes[3]
}

func (x DeferredReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeferredReason.Descriptor instead.
func (DeferredReason) EnumDescriptor() ([]byte, []int) {
	return file_planfile_proto_rawDescGZIP(), []int{3}
}

// ActionInvocation describes the reason an action was triggered
type ActionTriggerEvent int32

const (
	ActionTriggerEvent_INVALID_EVENT  ActionTriggerEvent = 0
	ActionTriggerEvent_BEFORE_CERATE  ActionTriggerEvent = 1
	ActionTriggerEvent_AFTER_CREATE   ActionTriggerEvent = 2
	ActionTriggerEvent_BEFORE_UPDATE  ActionTriggerEvent = 3
	ActionTriggerEvent_AFTER_UPDATE   ActionTriggerEvent = 4
	ActionTriggerEvent_BEFORE_DESTROY ActionTriggerEvent = 5
	ActionTriggerEvent_AFTER_DESTROY  ActionTriggerEvent = 6
	ActionTriggerEvent_INVOKE         ActionTriggerEvent = 7
)

// Enum value maps for ActionTriggerEvent.
var (
	ActionTriggerEvent_name = map[int32]string{
		0: "INVALID_EVENT",
		1: "BEFORE_CERATE",
		2: "AFTER_CREATE",
		3: "BEFORE_UPDATE",
		4: "AFTER_UPDATE",
		5: "BEFORE_DESTROY",
		6: "AFTER_DESTROY",
		7: "INVOKE",
	}
	ActionTriggerEvent_value = map[string]int32{
		"INVALID_EVENT":  0,
		"BEFORE_CERATE":  1,
		"AFTER_CREATE":   2,
		"BEFORE_UPDATE":  3,
		"AFTER_UPDATE":   4,
		"BEFORE_DESTROY": 5,
		"AFTER_DESTROY":  6,
		"INVOKE":         7,
	}
)

func (x ActionTriggerEvent) Enum() *ActionTriggerEvent {
	p := new(ActionTriggerEvent)
	*p = x
	return p
}

func (x ActionTriggerEvent) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionTriggerEvent) Descriptor() protoreflect.EnumDescriptor {
	return file_planfile_proto_enumTypes[4].Descriptor()
}

func (ActionTriggerEvent) Type() protoreflect.EnumType {
	return &file_planfile_proto_enumTypes[4]
}

func (x ActionTriggerEvent) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionTriggerEvent.Descriptor instead.
func (ActionTriggerEvent) EnumDescriptor() ([]byte, []int) {
	return file_planfile_proto_rawDescGZIP(), []int{4}
}

// Status describes the status of a particular checkable object at the
// completion of the plan.
type CheckResults_Status int32

const (
	CheckResults_UNKNOWN CheckResults_Status = 0
	CheckResults_PASS    CheckResults_Status = 1
	CheckResults_FAIL    CheckResults_Status = 2
	CheckResults_ERROR   CheckResults_Status = 3
)

// Enum value maps for CheckResults_Status.
var (
	CheckResults_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "PASS",
		2: "FAIL",
		3: "ERROR",
	}
	CheckResults_Status_value = map[string]int32{
		"UNKNOWN": 0,
		"PASS":    1,
		"FAIL":    2,
		"ERROR":   3,
	}
)

func (x CheckResults_Status) Enum() *CheckResults_Status {
	p := new(CheckResults_Status)
	*p = x
	return p
}

func (x CheckResults_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckResults_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_planfile_proto_enumTypes[5].Descriptor()
}

func (CheckResults_Status) Type() protoreflect.EnumType {
	return &file_planfile_proto_enumTypes[5]
}

func (x CheckResults_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckResults_Status.Descriptor instead.
func (CheckResults_Status) EnumDescriptor() ([]byte, []int) {
	return file_planfile_proto_rawDescGZIP(), []int{9, 0}
}

type CheckResults_ObjectKind int32

const (
	CheckResults_UNSPECIFIED    CheckResults_ObjectKind = 0
	CheckResults_RESOURCE       CheckResults_ObjectKind = 1
	CheckResults_OUTPUT_VALUE   CheckResults_ObjectKind = 2
	CheckResults_CHECK          CheckResults_ObjectKind = 3
	CheckResults_INPUT_VARIABLE CheckResults_ObjectKind = 4
)

// Enum value maps for CheckResults_ObjectKind.
var (
	CheckResults_ObjectKind_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "RESOURCE",
		2: "OUTPUT_VALUE",
		3: "CHECK",
		4: "INPUT_VARIABLE",
	}
	CheckResults_ObjectKind_value = map[string]int32{
		"UNSPECIFIED":    0,
		"RESOURCE":       1,
		"OUTPUT_VALUE":   2,
		"CHECK":          3,
		"INPUT_VARIABLE": 4,
	}
)

func (x CheckResults_ObjectKind) Enum() *CheckResults_ObjectKind {
	p := new(CheckResults_ObjectKind)
	*p = x
	return p
}

func (x CheckResults_ObjectKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CheckResults_ObjectKind) Descriptor() protoreflect.EnumDescriptor {
	return file_planfile_proto_enumTypes[6].Descriptor()
}

func (CheckResults_ObjectKind) Type() protoreflect.EnumType {
	return &file_planfile_proto_enumTypes[6]
}

func (x CheckResults_ObjectKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CheckResults_ObjectKind.Descriptor instead.
func (CheckResults_ObjectKind) EnumDescriptor() ([]byte, []int) {
	return file_planfile_proto_rawDescGZIP(), []int{9, 1}
}

// Plan is the root message type for the tfplan file
type Plan struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Version is incremented whenever there is a breaking change to
	// the serialization format. Programs reading serialized plans should
	// verify that version is set to the expected value and abort processing
	// if not. A breaking change is any change that may cause an older
	// consumer to interpret the structure incorrectly. This number will
	// not be incremented if an existing consumer can either safely ignore
	// changes to the format or if an existing consumer would fail to process
	// the file for another message- or field-specific reason.
	Version uint64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	// The mode that was active when this plan was created.
	//
	// This is saved only for UI purposes, so that Terraform can tailor its
	// rendering of the plan depending on the mode. This must never be used to
	// make decisions in Terraform Core during the applying of a plan.
	UiMode Mode `protobuf:"varint,17,opt,name=ui_mode,json=uiMode,proto3,enum=tfplan.Mode" json:"ui_mode,omitempty"`
	// Applyable is true for any plan where it makes sense to ask an operator
	// to approve it and then ask Terraform to apply it.
	//
	// The other fields provide more context about why a non-applyable plan
	// is not applyable, but this field is here so that if new situations
	// arise in future then old callers can at least still make the right
	// decision about whether to show the approval prompt, even if they don't
	// know yet why a particular plan isn't applyable and have to just use
	// a generic error message.
	Applyable bool `protobuf:"varint,25,opt,name=applyable,proto3" json:"applyable,omitempty"`
	// Complete is true for a plan that includes a planned action for every
	// resource input object that was present across the desired state and
	// prior state, even if the planned action is "no-op".
	//
	// Conversely, if this field is false then the plan deals with only a
	// subset of those objects. The reason for that should always be
	// determinable based on other fields in this message, but this flag
	// is here to ensure that if new situations arise in future then old
	// callers can at least still show a generic message about the plan
	// being incomplete, even if they don't know yet how to explain the
	// reason to the operator.
	Complete bool `protobuf:"varint,26,opt,name=complete,proto3" json:"complete,omitempty"`
	// Errored is true for any plan whose creation was interrupted by an
	// error. A plan with this flag set cannot be applied
	// (i.e. applyable = false), and the changes it proposes are likely to be
	// incomplete.
	Errored bool `protobuf:"varint,20,opt,name=errored,proto3" json:"errored,omitempty"`
	// The variables that were set when creating the plan. Each value is
	// a msgpack serialization of an HCL value.
	Variables map[string]*DynamicValue `protobuf:"bytes,2,rep,name=variables,proto3" json:"variables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Variables whose values must be provided during the apply phase.
	ApplyTimeVariables []string `protobuf:"bytes,28,rep,name=apply_time_variables,json=applyTimeVariables,proto3" json:"apply_time_variables,omitempty"`
	// An unordered set of proposed changes to resources throughout the
	// configuration, including any nested modules. Use the address of
	// each resource to determine which module it belongs to.
	ResourceChanges []*ResourceInstanceChange `protobuf:"bytes,3,rep,name=resource_changes,json=resourceChanges,proto3" json:"resource_changes,omitempty"`
	// An unordered set of detected drift: changes made to resources outside of
	// Terraform, computed by comparing the previous run's state to the state
	// after refresh.
	ResourceDrift []*ResourceInstanceChange `protobuf:"bytes,18,rep,name=resource_drift,json=resourceDrift,proto3" json:"resource_drift,omitempty"`
	// An unordered set of deferred changes. These are changes that will be
	// applied in a subsequent plan, but were deferred in this plan for some
	// reason. Generally, if complete is set to false there should be entries
	// in this list.
	DeferredChanges []*DeferredResourceInstanceChange `protobuf:"bytes,27,rep,name=deferred_changes,json=deferredChanges,proto3" json:"deferred_changes,omitempty"`
	// An unordered set of deferred action invocations. These are action invocations that will be
	// applied in a subsequent plan, but were deferred in this plan for some
	// reason. Generally, if complete is set to false there should be entries
	// in this list.
	DeferredActionInvocations []*DeferredActionInvocation `protobuf:"bytes,31,rep,name=deferred_action_invocations,json=deferredActionInvocations,proto3" json:"deferred_action_invocations,omitempty"`
	// An unordered set of proposed changes to outputs in the root module
	// of the configuration. This set also includes "no action" changes for
	// outputs that are not changing, as context for detecting inconsistencies
	// at apply time.
	OutputChanges []*OutputChange `protobuf:"bytes,4,rep,name=output_changes,json=outputChanges,proto3" json:"output_changes,omitempty"`
	// An unordered set of check results for the entire configuration.
	//
	// Each element represents a single static configuration object that has
	// checks, and each of those may have zero or more dynamic objects that
	// the checks were applied to nested within.
	CheckResults []*CheckResults `protobuf:"bytes,19,rep,name=check_results,json=checkResults,proto3" json:"check_results,omitempty"`
	// An unordered set of proposed action invocations.
	ActionInvocations []*ActionInvocationInstance `protobuf:"bytes,30,rep,name=action_invocations,json=actionInvocations,proto3" json:"action_invocations,omitempty"`
	// An unordered set of target addresses to include when applying. If no
	// target addresses are present, the plan applies to the whole
	// configuration.
	TargetAddrs []string `protobuf:"bytes,5,rep,name=target_addrs,json=targetAddrs,proto3" json:"target_addrs,omitempty"`
	// An unordered set of action addresses that must be invoked when applying.
	// If no actions are specified then only lifecycle actions should be
	// executed.
	ActionTargetAddrs []string `protobuf:"bytes,32,rep,name=action_target_addrs,json=actionTargetAddrs,proto3" json:"action_target_addrs,omitempty"`
	// An unordered set of force-replace addresses to include when applying.
	// This must match the set of addresses that was used when creating the
	// plan, or else applying the plan will fail when it reaches a different
	// conclusion about what action a particular resource instance needs.
	ForceReplaceAddrs []string `protobuf:"bytes,16,rep,name=force_replace_addrs,json=forceReplaceAddrs,proto3" json:"force_replace_addrs,omitempty"`
	// The version string for the Terraform binary that created this plan.
	TerraformVersion string `protobuf:"bytes,14,opt,name=terraform_version,json=terraformVersion,proto3" json:"terraform_version,omitempty"`
	// Backend is a description of the backend configuration and other related
	// settings at the time the plan was created.
	Backend *Backend `protobuf:"bytes,13,opt,name=backend,proto3" json:"backend,omitempty"`
	// StateStore is a description of the state_store configuration and other related
	// settings at the time the plan was created.
	StateStore *StateStore `protobuf:"bytes,29,opt,name=state_store,json=stateStore,proto3" json:"state_store,omitempty"`
	// RelevantAttributes lists individual resource attributes from
	// ResourceDrift which may have contributed to the plan changes.
	RelevantAttributes []*PlanResourceAttr `protobuf:"bytes,15,rep,name=relevant_attributes,json=relevantAttributes,proto3" json:"relevant_attributes,omitempty"`
	// timestamp is the record of truth for when the plan happened.
	Timestamp       string              `protobuf:"bytes,21,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	FunctionResults []*FunctionCallHash `protobuf:"bytes,22,rep,name=function_results,json=functionResults,proto3" json:"function_results,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Plan) Reset() {
	*x = Plan{}
	mi := &file_planfile_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Plan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plan) ProtoMessage() {}

func (x *Plan) ProtoReflect() protoreflect.Message {
	mi := &file_planfile_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plan.ProtoReflect.Descriptor instead.
func (*Plan) Descriptor() ([]byte, []int) {
	return file_planfile_proto_rawDescGZIP(), []int{0}
}

func (x *Plan) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Plan) GetUiMode() Mode {
	if x != nil {
		return x.UiMode
	}
	return Mode_NORMAL
}

func (x *Plan) GetApplyable() bool {
	if x != nil {
		return x.Applyable
	}
	return false
}

func (x *Plan) GetComplete() bool {
	if x != nil {
		return x.Complete
	}
	return false
}

func (x *Plan) GetErrored() bool {
	if x != nil {
		return x.Errored
	}
	return false
}

func (x *Plan) GetVariables() map[string]*DynamicValue {
	if x != nil {
		return x.Variables
	}
	return nil
}

func (x *Plan) GetApplyTimeVariables() []string {
	if x != nil {
		return x.ApplyTimeVariables
	}
	return nil
}

func (x *Plan) GetResourceChanges() []*ResourceInstanceChange {
	if x != nil {
		return x.ResourceChanges
	}
	return nil
}

func (x *Plan) GetResourceDrift() []*ResourceInstanceChange {
	if x != nil {
		return x.ResourceDrift
	}
	return nil
}

func (x *Plan) GetDeferredChanges() []*DeferredResourceInstanceChange {
	if x != nil {
		return x.DeferredChanges
	}
	return nil
}

func (x *Plan) GetDeferredActionInvocations() []*DeferredActionInvocation {
	if x != nil {
		return x.DeferredActionInvocations
	}
	return nil
}

func (x *Plan) GetOutputChanges() []*OutputChange {
	if x != nil {
		return x.OutputChanges
	}
	return nil
}

func (x *Plan) GetCheckResults() []*CheckResults {
	if x != nil {
		return x.CheckResults
	}
	return nil
}

func (x *Plan) GetActionInvocations() []*ActionInvocationInstance {
	if x != nil {
		return x.ActionInvocations
	}
	return nil
}

func (x *Plan) GetTargetAddrs() []string {
	if x != nil {
		return x.TargetAddrs
	}
	return nil
}

func (x *Plan) GetActionTargetAddrs() []string {
	if x != nil {
		return x.ActionTargetAddrs
	}
	return nil
}

func (x *Plan) GetForceReplaceAddrs() []string {
	if x != nil {
		return x.ForceReplaceAddrs
	}
	return nil
}

func (x *Plan) GetTerraformVersion() string {
	if x != nil {
		return x.TerraformVersion
	}
	return ""
}

func (x *Plan) GetBackend() *Backend {
	if x != nil {
		return x.Backend
	}
	return nil
}

func (x *Plan) GetStateStore() *StateStore {
	if x != nil {
		return x.StateStore
	}
	return nil
}

func (x *Plan) GetRelevantAttributes() []*PlanResourceAttr {
	if x != nil {
		return x.RelevantAttributes
	}
	return nil
}

func (x *Plan) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *Plan) GetFunctionResults() []*FunctionCallHash {
	if x != nil {
		return x.FunctionResults
	}
	return nil
}

// Backend is a description of backend configuration and other related settings.
type Backend struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Config        *DynamicValue          `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	Workspace     string                 `protobuf:"bytes,3,opt,name=workspace,proto3" json:"workspace,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Backend) Reset() {
	*x = Backend{}
	mi := &file_planfile_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Backend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backend) ProtoMessage() {}

func (x *Backend) ProtoReflect() protoreflect.Message {
	mi := &file_planfile_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backend.ProtoReflect.Descriptor instead.
func (*Backend) Descriptor() ([]byte, []int) {
	return file_planfile_proto_rawDescGZIP(), []int{1}
}

func (x *Backend) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Backend) GetConfig() *DynamicValue {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Backend) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

// StateStore is a description of state_store configuration and other related settings.
type StateStore struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Config        *DynamicValue          `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	Workspace     string                 `protobuf:"bytes,3,opt,name=workspace,proto3" json:"workspace,omitempty"`
	Provider      *Provider              `protobuf:"bytes,4,opt,name=provider,proto3" json:"provider,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StateStore) Reset() {
	*x = StateStore{}
	mi := &file_planfile_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StateStore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StateStore) ProtoMessage() {}

func (x *StateStore) ProtoReflect() protoreflect.Message {
	mi := &file_planfile_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StateStore.ProtoReflect.Descriptor instead.
func (*StateStore) Descriptor() ([]byte, []int) {
	return file_planfile_proto_rawDescGZIP(), []int{2}
}

func (x *StateStore) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *StateStore) GetConfig() *DynamicValue {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *StateStore) GetWorkspace() string {
	if x != nil {
		return x.Workspace
	}
	return ""
}

func (x *StateStore) GetProvider() *Provider {
	if x != nil {
		return x.Provider
	}
	return nil
}

type Provider struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Source        string                 `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Version       string                 `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Provider) Reset() {
	*x = Provider{}
	mi := &file_planfile_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Provider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Provider) ProtoMessage() {}

func (x *Provider) ProtoReflect() protoreflect.Message {
	mi := &file_planfile_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Provider.ProtoReflect.Descriptor instead.
func (*Provider) Descriptor() ([]byte, []int) {
	return file_planfile_proto_rawDescGZIP(), []int{3}
}

func (x *Provider) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *Provider) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Change represents a change made to some object, transforming it from an old
// state to a new state.
type Change struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Not all action values are valid for all object types. Consult
	// the documentation for any message that embeds Change.
	Action Action `protobuf:"varint,1,opt,name=action,proto3,enum=tfplan.Action" json:"action,omitempty"`
	// msgpack-encoded HCL values involved in the change.
	//   - For update and replace, two values are provided that give the old and new values,
	//     respectively.
	//   - For create, one value is provided that gives the new value to be created
	//   - For delete, one value is provided that describes the value being deleted
	//   - For read, two values are provided that give the prior value for this object
	//     (or null, if no prior value exists) and the value that was or will be read,
	//     respectively.
	//   - For no-op, one value is provided that is left unmodified by this non-change.
	Values []*DynamicValue `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	// An unordered set of paths into the old value which are marked as
	// sensitive. Values at these paths should be obscured in human-readable
	// output. This set is always empty for create.
	BeforeSensitivePaths []*Path `protobuf:"bytes,3,rep,name=before_sensitive_paths,json=beforeSensitivePaths,proto3" json:"before_sensitive_paths,omitempty"`
	// An unordered set of paths into the new value which are marked as
	// sensitive. Values at these paths should be obscured in human-readable
	// output. This set is always empty for delete.
	AfterSensitivePaths []*Path `protobuf:"bytes,4,rep,name=after_sensitive_paths,json=afterSensitivePaths,proto3" json:"after_sensitive_paths,omitempty"`
	// Importing, if true, specifies that the resource is being imported as part
	// of the change.
	Importing *Importing `protobuf:"bytes,5,opt,name=importing,proto3" json:"importing,omitempty"`
	// GeneratedConfig contains any configuration that was generated as part of
	// the change, as an HCL string.
	GeneratedConfig string `protobuf:"bytes,6,opt,name=generated_config,json=generatedConfig,proto3" json:"generated_config,omitempty"`
	// The resource identity before the plan operation
	BeforeIdentity *DynamicValue `protobuf:"bytes,7,opt,name=before_identity,json=beforeIdentity,proto3" json:"before_identity,omitempty"`
	// The resource identity after the plan operation
	AfterIdentity *DynamicValue `protobuf:"bytes,8,opt,name=after_identity,json=afterIdentity,proto3" json:"after_identity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Change) Reset() {
	*x = Change{}
	mi := &file_planfile_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Change) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Change) ProtoMessage() {}

func (x *Change) ProtoReflect() protoreflect.Message {
	mi := &file_planfile_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Change.ProtoReflect.Descriptor instead.
func (*Change) Descriptor() ([]byte, []int) {
	return file_planfile_proto_rawDescGZIP(), []int{4}
}

func (x *Change) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_NOOP
}

func (x *Change) GetValues() []*DynamicValue {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Change) GetBeforeSensitivePaths() []*Path {
	if x != nil {
		return x.BeforeSensitivePaths
	}
	return nil
}

func (x *Change) GetAfterSensitivePaths() []*Path {
	if x != nil {
		return x.AfterSensitivePaths
	}
	return nil
}

func (x *Change) GetImporting() *Importing {
	if x != nil {
		return x.Importing
	}
	return nil
}

func (x *Change) GetGeneratedConfig() string {
	if x != nil {
		return x.GeneratedConfig
	}
	return ""
}

func (x *Change) GetBeforeIdentity() *DynamicValue {
	if x != nil {
		return x.BeforeIdentity
	}
	return nil
}

func (x *Change) GetAfterIdentity() *DynamicValue {
	if x != nil {
		return x.AfterIdentity
	}
	return nil
}

type ResourceInstanceChange struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// addr is a string representation of the resource instance address that
	// this change will apply to.
	Addr string `protobuf:"bytes,13,opt,name=addr,proto3" json:"addr,omitempty"`
	// prev_run_addr is a string representation of the address at which
	// this resource instance was tracked during the previous apply operation.
	//
	// This is populated only if it would be different from addr due to
	// Terraform having reacted to refactoring annotations in the configuration.
	// If empty, the previous run address is the same as the current address.
	PrevRunAddr string `protobuf:"bytes,14,opt,name=prev_run_addr,json=prevRunAddr,proto3" json:"prev_run_addr,omitempty"`
	// deposed_key, if set, indicates that this change applies to a deposed
	// object for the indicated instance with the given deposed key. If not
	// set, the change applies to the instance's current object.
	DeposedKey string `protobuf:"bytes,7,opt,name=deposed_key,json=deposedKey,proto3" json:"deposed_key,omitempty"`
	// provider is the address of the provider configuration that this change
	// was planned with, and thus the configuration that must be used to
	// apply it.
	Provider string `protobuf:"bytes,8,opt,name=provider,proto3" json:"provider,omitempty"`
	// Description of the proposed change. May use "create", "read", "update",
	// "replace", "delete" and "no-op" actions.
	Change *Change `protobuf:"bytes,9,opt,name=change,proto3" json:"change,omitempty"`
	// raw blob value provided by the provider as additional context for the
	// change. Must be considered an opaque value for any consumer other than
	// the provider that generated it, and will be returned verbatim to the
	// provider during the subsequent apply operation.
	Private []byte `protobuf:"bytes,10,opt,name=private,proto3" json:"private,omitempty"`
	// An unordered set of paths that prompted the change action to be
	// "replace" rather than "update". Empty for any action other than
	// "replace".
	RequiredReplace []*Path `protobuf:"bytes,11,rep,name=required_replace,json=requiredReplace,proto3" json:"required_replace,omitempty"`
	// Optional extra user-oriented context for why change.Action was chosen.
	// This is for user feedback only and never used to drive behavior during
	// apply.
	ActionReason  ResourceInstanceActionReason `protobuf:"varint,12,opt,name=action_reason,json=actionReason,proto3,enum=tfplan.ResourceInstanceActionReason" json:"action_reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceInstanceChange) Reset() {
	*x = ResourceInstanceChange{}
	mi := &file_planfile_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceInstanceChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceInstanceChange) ProtoMessage() {}

func (x *ResourceInstanceChange) ProtoReflect() protoreflect.Message {
	mi := &file_planfile_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceInstanceChange.ProtoReflect.Descriptor instead.
func (*ResourceInstanceChange) Descriptor() ([]byte, []int) {
	return file_planfile_proto_rawDescGZIP(), []int{5}
}

func (x *ResourceInstanceChange) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *ResourceInstanceChange) GetPrevRunAddr() string {
	if x != nil {
		return x.PrevRunAddr
	}
	return ""
}

func (x *ResourceInstanceChange) GetDeposedKey() string {
	if x != nil {
		return x.DeposedKey
	}
	return ""
}

func (x *ResourceInstanceChange) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ResourceInstanceChange) GetChange() *Change {
	if x != nil {
		return x.Change
	}
	return nil
}

func (x *ResourceInstanceChange) GetPrivate() []byte {
	if x != nil {
		return x.Private
	}
	return nil
}

func (x *ResourceInstanceChange) GetRequiredReplace() []*Path {
	if x != nil {
		return x.RequiredReplace
	}
	return nil
}

func (x *ResourceInstanceChange) GetActionReason() ResourceInstanceActionReason {
	if x != nil {
		return x.ActionReason
	}
	return ResourceInstanceActionReason_NONE
}

// DeferredResourceInstanceChange represents a resource instance change that
// was deferred for some reason.
//
// It contains the original change that was deferred, along with the reason
// why it was deferred.
type DeferredResourceInstanceChange struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The reason why the change was deferred.
	Deferred *Deferred `protobuf:"bytes,1,opt,name=deferred,proto3" json:"deferred,omitempty"`
	// The original change that was deferred.
	Change        *ResourceInstanceChange `protobuf:"bytes,2,opt,name=change,proto3" json:"change,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeferredResourceInstanceChange) Reset() {
	*x = DeferredResourceInstanceChange{}
	mi := &file_planfile_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeferredResourceInstanceChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeferredResourceInstanceChange) ProtoMessage() {}

func (x *DeferredResourceInstanceChange) ProtoReflect() protoreflect.Message {
	mi := &file_planfile_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeferredResourceInstanceChange.ProtoReflect.Descriptor instead.
func (*DeferredResourceInstanceChange) Descriptor() ([]byte, []int) {
	return file_planfile_proto_rawDescGZIP(), []int{6}
}

func (x *DeferredResourceInstanceChange) GetDeferred() *Deferred {
	if x != nil {
		return x.Deferred
	}
	return nil
}

func (x *DeferredResourceInstanceChange) GetChange() *ResourceInstanceChange {
	if x != nil {
		return x.Change
	}
	return nil
}

// DeferredActionInvocation represents an action invocation that
// was deferred for some reason.
// It contains the original action invocation that was deferred, along with the reason
// why it was deferred.
type DeferredActionInvocation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The reason why the action invocation was deferred.
	Deferred *Deferred `protobuf:"bytes,1,opt,name=deferred,proto3" json:"deferred,omitempty"`
	// The original action invocation that was deferred.
	ActionInvocation *ActionInvocationInstance `protobuf:"bytes,2,opt,name=action_invocation,json=actionInvocation,proto3" json:"action_invocation,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DeferredActionInvocation) Reset() {
	*x = DeferredActionInvocation{}
	mi := &file_planfile_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeferredActionInvocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeferredActionInvocation) ProtoMessage() {}

func (x *DeferredActionInvocation) ProtoReflect() protoreflect.Message {
	mi := &file_planfile_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeferredActionInvocation.ProtoReflect.Descriptor instead.
func (*DeferredActionInvocation) Descriptor() ([]byte, []int) {
	return file_planfile_proto_rawDescGZIP(), []int{7}
}

func (x *DeferredActionInvocation) GetDeferred() *Deferred {
	if x != nil {
		return x.Deferred
	}
	return nil
}

func (x *DeferredActionInvocation) GetActionInvocation() *ActionInvocationInstance {
	if x != nil {
		return x.ActionInvocation
	}
	return nil
}

type OutputChange struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the output as defined in the root module.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Description of the proposed change. May use "no-op", "create",
	// "update" and "delete" actions.
	Change *Change `protobuf:"bytes,2,opt,name=change,proto3" json:"change,omitempty"`
	// Sensitive, if true, indicates that one or more of the values given
	// in "change" is sensitive and should not be shown directly in any
	// rendered plan.
	Sensitive     bool `protobuf:"varint,3,opt,name=sensitive,proto3" json:"sensitive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OutputChange) Reset() {
	*x = OutputChange{}
	mi := &file_planfile_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutputChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputChange) ProtoMessage() {}

func (x *OutputChange) ProtoReflect() protoreflect.Message {
	mi := &file_planfile_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputChange.ProtoReflect.Descriptor instead.
func (*OutputChange) Descriptor() ([]byte, []int) {
	return file_planfile_proto_rawDescGZIP(), []int{8}
}

func (x *OutputChange) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OutputChange) GetChange() *Change {
	if x != nil {
		return x.Change
	}
	return nil
}

func (x *OutputChange) GetSensitive() bool {
	if x != nil {
		return x.Sensitive
	}
	return false
}

type CheckResults struct {
	state protoimpl.MessageState  `protogen:"open.v1"`
	Kind  CheckResults_ObjectKind `protobuf:"varint,1,opt,name=kind,proto3,enum=tfplan.CheckResults_ObjectKind" json:"kind,omitempty"`
	// Address of the configuration object that declared the checks.
	ConfigAddr string `protobuf:"bytes,2,opt,name=config_addr,json=configAddr,proto3" json:"config_addr,omitempty"`
	// The aggregate status of the entire configuration object, based on
	// the statuses of its zero or more checkable objects.
	Status CheckResults_Status `protobuf:"varint,3,opt,name=status,proto3,enum=tfplan.CheckResults_Status" json:"status,omitempty"`
	// The results for individual objects that were declared by the
	// configuration object named in config_addr.
	Objects       []*CheckResults_ObjectResult `protobuf:"bytes,4,rep,name=objects,proto3" json:"objects,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckResults) Reset() {
	*x = CheckResults{}
	mi := &file_planfile_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckResults) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResults) ProtoMessage() {}

func (x *CheckResults) ProtoReflect() protoreflect.Message {
	mi := &file_planfile_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResults.ProtoReflect.Descriptor instead.
func (*CheckResults) Descriptor() ([]byte, []int) {
	return file_planfile_proto_rawDescGZIP(), []int{9}
}

func (x *CheckResults) GetKind() CheckResults_ObjectKind {
	if x != nil {
		return x.Kind
	}
	return CheckResults_UNSPECIFIED
}

func (x *CheckResults) GetConfigAddr() string {
	if x != nil {
		return x.ConfigAddr
	}
	return ""
}

func (x *CheckResults) GetStatus() CheckResults_Status {
	if x != nil {
		return x.Status
	}
	return CheckResults_UNKNOWN
}

func (x *CheckResults) GetObjects() []*CheckResults_ObjectResult {
	if x != nil {
		return x.Objects
	}
	return nil
}

// FunctionCallHash stores a record of a hashed function call and
// result. This is used internally to ensure that providers return consistent
// values between plan and apply given the same arguments.
type FunctionCallHash struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Key           []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Result        []byte                 `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FunctionCallHash) Reset() {
	*x = FunctionCallHash{}
	mi := &file_planfile_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionCallHash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionCallHash) ProtoMessage() {}

func (x *FunctionCallHash) ProtoReflect() protoreflect.Message {
	mi := &file_planfile_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionCallHash.ProtoReflect.Descriptor instead.
func (*FunctionCallHash) Descriptor() ([]byte, []int) {
	return file_planfile_proto_rawDescGZIP(), []int{10}
}

func (x *FunctionCallHash) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *FunctionCallHash) GetResult() []byte {
	if x != nil {
		return x.Result
	}
	return nil
}

// DynamicValue represents a value whose type is not decided until runtime,
// often based on schema information obtained from a plugin.
//
// At present dynamic values are always encoded as msgpack, with extension
// id 0 used to represent the special "unknown" value indicating results
// that won't be known until after apply.
//
// In future other serialization formats may be used, possibly with a
// transitional period of including both as separate attributes of this type.
// Consumers must ignore attributes they don't support and fail if no supported
// attribute is present. The top-level format version will not be incremented
// for changes to the set of dynamic serialization formats.
type DynamicValue struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Msgpack       []byte                 `protobuf:"bytes,1,opt,name=msgpack,proto3" json:"msgpack,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DynamicValue) Reset() {
	*x = DynamicValue{}
	mi := &file_planfile_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DynamicValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicValue) ProtoMessage() {}

func (x *DynamicValue) ProtoReflect() protoreflect.Message {
	mi := &file_planfile_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicValue.ProtoReflect.Descriptor instead.
func (*DynamicValue) Descriptor() ([]byte, []int) {
	return file_planfile_proto_rawDescGZIP(), []int{11}
}

func (x *DynamicValue) GetMsgpack() []byte {
	if x != nil {
		return x.Msgpack
	}
	return nil
}

// Path represents a set of steps to traverse into a data structure. It is
// used to refer to a sub-structure within a dynamic data structure presented
// separately.
type Path struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Steps         []*Path_Step           `protobuf:"bytes,1,rep,name=steps,proto3" json:"steps,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Path) Reset() {
	*x = Path{}
	mi := &file_planfile_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Path) ProtoMessage() {}

func (x *Path) ProtoReflect() protoreflect.Message {
	mi := &file_planfile_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Path.ProtoReflect.Descriptor instead.
func (*Path) Descriptor() ([]byte, []int) {
	return file_planfile_proto_rawDescGZIP(), []int{12}
}

func (x *Path) GetSteps() []*Path_Step {
	if x != nil {
		return x.Steps
	}
	return nil
}

// Importing contains the embedded metadata about the import operation if this
// change describes it.
type Importing struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The original ID of the resource.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// unknown is true if the original ID of the resource is unknown.
	Unknown bool `protobuf:"varint,2,opt,name=unknown,proto3" json:"unknown,omitempty"`
	// Identity can be used to import instead of id
	Identity      *DynamicValue `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Importing) Reset() {
	*x = Importing{}
	mi := &file_planfile_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Importing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Importing) ProtoMessage() {}

func (x *Importing) ProtoReflect() protoreflect.Message {
	mi := &file_planfile_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Importing.ProtoReflect.Descriptor instead.
func (*Importing) Descriptor() ([]byte, []int) {
	return file_planfile_proto_rawDescGZIP(), []int{13}
}

func (x *Importing) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Importing) GetUnknown() bool {
	if x != nil {
		return x.Unknown
	}
	return false
}

func (x *Importing) GetIdentity() *DynamicValue {
	if x != nil {
		return x.Identity
	}
	return nil
}

// Deferred contains all the metadata about a the deferral of a resource
// instance change.
type Deferred struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reason        DeferredReason         `protobuf:"varint,1,opt,name=reason,proto3,enum=tfplan.DeferredReason" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Deferred) Reset() {
	*x = Deferred{}
	mi := &file_planfile_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Deferred) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deferred) ProtoMessage() {}

func (x *Deferred) ProtoReflect() protoreflect.Message {
	mi := &file_planfile_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deferred.ProtoReflect.Descriptor instead.
func (*Deferred) Descriptor() ([]byte, []int) {
	return file_planfile_proto_rawDescGZIP(), []int{14}
}

func (x *Deferred) GetReason() DeferredReason {
	if x != nil {
		return x.Reason
	}
	return DeferredReason_INVALID
}

// ActionInvocationInstance contains a planned action invocation and any embedded ResourceInstanceActionChanges
type ActionInvocationInstance struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// addr is a string representation of the action invocation instance address of this change
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	// provider is the address of the provider configuration that this change
	// was planned with, and thus the configuration that must be used to
	// apply it.
	Provider    string        `protobuf:"bytes,2,opt,name=provider,proto3" json:"provider,omitempty"`
	ConfigValue *DynamicValue `protobuf:"bytes,4,opt,name=config_value,json=configValue,proto3" json:"config_value,omitempty"`
	// An unordered set of paths into config_value which are marked as
	// sensitive. Values at these paths should be obscured in human-readable
	// output.
	SensitiveConfigPaths []*Path `protobuf:"bytes,5,rep,name=sensitive_config_paths,json=sensitiveConfigPaths,proto3" json:"sensitive_config_paths,omitempty"`
	// Types that are valid to be assigned to ActionTrigger:
	//
	//	*ActionInvocationInstance_LifecycleActionTrigger
	//	*ActionInvocationInstance_InvokeActionTrigger
	ActionTrigger isActionInvocationInstance_ActionTrigger `protobuf_oneof:"action_trigger"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ActionInvocationInstance) Reset() {
	*x = ActionInvocationInstance{}
	mi := &file_planfile_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionInvocationInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionInvocationInstance) ProtoMessage() {}

func (x *ActionInvocationInstance) ProtoReflect() protoreflect.Message {
	mi := &file_planfile_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionInvocationInstance.ProtoReflect.Descriptor instead.
func (*ActionInvocationInstance) Descriptor() ([]byte, []int) {
	return file_planfile_proto_rawDescGZIP(), []int{15}
}

func (x *ActionInvocationInstance) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *ActionInvocationInstance) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *ActionInvocationInstance) GetConfigValue() *DynamicValue {
	if x != nil {
		return x.ConfigValue
	}
	return nil
}

func (x *ActionInvocationInstance) GetSensitiveConfigPaths() []*Path {
	if x != nil {
		return x.SensitiveConfigPaths
	}
	return nil
}

func (x *ActionInvocationInstance) GetActionTrigger() isActionInvocationInstance_ActionTrigger {
	if x != nil {
		return x.ActionTrigger
	}
	return nil
}

func (x *ActionInvocationInstance) GetLifecycleActionTrigger() *LifecycleActionTrigger {
	if x != nil {
		if x, ok := x.ActionTrigger.(*ActionInvocationInstance_LifecycleActionTrigger); ok {
			return x.LifecycleActionTrigger
		}
	}
	return nil
}

func (x *ActionInvocationInstance) GetInvokeActionTrigger() *InvokeActionTrigger {
	if x != nil {
		if x, ok := x.ActionTrigger.(*ActionInvocationInstance_InvokeActionTrigger); ok {
			return x.InvokeActionTrigger
		}
	}
	return nil
}

type isActionInvocationInstance_ActionTrigger interface {
	isActionInvocationInstance_ActionTrigger()
}

type ActionInvocationInstance_LifecycleActionTrigger struct {
	LifecycleActionTrigger *LifecycleActionTrigger `protobuf:"bytes,6,opt,name=lifecycle_action_trigger,json=lifecycleActionTrigger,proto3,oneof"`
}

type ActionInvocationInstance_InvokeActionTrigger struct {
	InvokeActionTrigger *InvokeActionTrigger `protobuf:"bytes,7,opt,name=invoke_action_trigger,json=invokeActionTrigger,proto3,oneof"`
}

func (*ActionInvocationInstance_LifecycleActionTrigger) isActionInvocationInstance_ActionTrigger() {}

func (*ActionInvocationInstance_InvokeActionTrigger) isActionInvocationInstance_ActionTrigger() {}

// LifecycleActionTrigger contains details on the conditions that led to the
// triggering of an action.
type LifecycleActionTrigger struct {
	state                   protoimpl.MessageState `protogen:"open.v1"`
	TriggeringResourceAddr  string                 `protobuf:"bytes,1,opt,name=triggering_resource_addr,json=triggeringResourceAddr,proto3" json:"triggering_resource_addr,omitempty"`
	TriggerEvent            ActionTriggerEvent     `protobuf:"varint,2,opt,name=trigger_event,json=triggerEvent,proto3,enum=tfplan.ActionTriggerEvent" json:"trigger_event,omitempty"`
	ActionTriggerBlockIndex int64                  `protobuf:"varint,3,opt,name=action_trigger_block_index,json=actionTriggerBlockIndex,proto3" json:"action_trigger_block_index,omitempty"`
	ActionsListIndex        int64                  `protobuf:"varint,4,opt,name=actions_list_index,json=actionsListIndex,proto3" json:"actions_list_index,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *LifecycleActionTrigger) Reset() {
	*x = LifecycleActionTrigger{}
	mi := &file_planfile_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LifecycleActionTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifecycleActionTrigger) ProtoMessage() {}

func (x *LifecycleActionTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_planfile_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifecycleActionTrigger.ProtoReflect.Descriptor instead.
func (*LifecycleActionTrigger) Descriptor() ([]byte, []int) {
	return file_planfile_proto_rawDescGZIP(), []int{16}
}

func (x *LifecycleActionTrigger) GetTriggeringResourceAddr() string {
	if x != nil {
		return x.TriggeringResourceAddr
	}
	return ""
}

func (x *LifecycleActionTrigger) GetTriggerEvent() ActionTriggerEvent {
	if x != nil {
		return x.TriggerEvent
	}
	return ActionTriggerEvent_INVALID_EVENT
}

func (x *LifecycleActionTrigger) GetActionTriggerBlockIndex() int64 {
	if x != nil {
		return x.ActionTriggerBlockIndex
	}
	return 0
}

func (x *LifecycleActionTrigger) GetActionsListIndex() int64 {
	if x != nil {
		return x.ActionsListIndex
	}
	return 0
}

// InvokeActionTrigger indicates the action was triggered by the invoke command
// on the CLI.
type InvokeActionTrigger struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InvokeActionTrigger) Reset() {
	*x = InvokeActionTrigger{}
	mi := &file_planfile_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InvokeActionTrigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvokeActionTrigger) ProtoMessage() {}

func (x *InvokeActionTrigger) ProtoReflect() protoreflect.Message {
	mi := &file_planfile_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvokeActionTrigger.ProtoReflect.Descriptor instead.
func (*InvokeActionTrigger) Descriptor() ([]byte, []int) {
	return file_planfile_proto_rawDescGZIP(), []int{17}
}

type ResourceInstanceActionChange struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// addr is a string representation of the resource instance address that
	// this change will apply to.
	Addr string `protobuf:"bytes,1,opt,name=addr,proto3" json:"addr,omitempty"`
	// deposed_key, if set, indicates that this change applies to a deposed
	// object for the indicated instance with the given deposed key. If not
	// set, the change applies to the instance's current object.
	DeposedKey string `protobuf:"bytes,2,opt,name=deposed_key,json=deposedKey,proto3" json:"deposed_key,omitempty"`
	// Description of the proposed change.
	// May use "update", "replace", "delete" and "no-op" actions.
	Change        *Change `protobuf:"bytes,3,opt,name=change,proto3" json:"change,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceInstanceActionChange) Reset() {
	*x = ResourceInstanceActionChange{}
	mi := &file_planfile_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceInstanceActionChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceInstanceActionChange) ProtoMessage() {}

func (x *ResourceInstanceActionChange) ProtoReflect() protoreflect.Message {
	mi := &file_planfile_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceInstanceActionChange.ProtoReflect.Descriptor instead.
func (*ResourceInstanceActionChange) Descriptor() ([]byte, []int) {
	return file_planfile_proto_rawDescGZIP(), []int{18}
}

func (x *ResourceInstanceActionChange) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *ResourceInstanceActionChange) GetDeposedKey() string {
	if x != nil {
		return x.DeposedKey
	}
	return ""
}

func (x *ResourceInstanceActionChange) GetChange() *Change {
	if x != nil {
		return x.Change
	}
	return nil
}

type PlanResourceAttr struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Resource      string                 `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	Attr          *Path                  `protobuf:"bytes,2,opt,name=attr,proto3" json:"attr,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlanResourceAttr) Reset() {
	*x = PlanResourceAttr{}
	mi := &file_planfile_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanResourceAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanResourceAttr) ProtoMessage() {}

func (x *PlanResourceAttr) ProtoReflect() protoreflect.Message {
	mi := &file_planfile_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanResourceAttr.ProtoReflect.Descriptor instead.
func (*PlanResourceAttr) Descriptor() ([]byte, []int) {
	return file_planfile_proto_rawDescGZIP(), []int{0, 1}
}

func (x *PlanResourceAttr) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *PlanResourceAttr) GetAttr() *Path {
	if x != nil {
		return x.Attr
	}
	return nil
}

type CheckResults_ObjectResult struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	ObjectAddr      string                 `protobuf:"bytes,1,opt,name=object_addr,json=objectAddr,proto3" json:"object_addr,omitempty"`
	Status          CheckResults_Status    `protobuf:"varint,2,opt,name=status,proto3,enum=tfplan.CheckResults_Status" json:"status,omitempty"`
	FailureMessages []string               `protobuf:"bytes,3,rep,name=failure_messages,json=failureMessages,proto3" json:"failure_messages,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CheckResults_ObjectResult) Reset() {
	*x = CheckResults_ObjectResult{}
	mi := &file_planfile_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckResults_ObjectResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResults_ObjectResult) ProtoMessage() {}

func (x *CheckResults_ObjectResult) ProtoReflect() protoreflect.Message {
	mi := &file_planfile_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResults_ObjectResult.ProtoReflect.Descriptor instead.
func (*CheckResults_ObjectResult) Descriptor() ([]byte, []int) {
	return file_planfile_proto_rawDescGZIP(), []int{9, 0}
}

func (x *CheckResults_ObjectResult) GetObjectAddr() string {
	if x != nil {
		return x.ObjectAddr
	}
	return ""
}

func (x *CheckResults_ObjectResult) GetStatus() CheckResults_Status {
	if x != nil {
		return x.Status
	}
	return CheckResults_UNKNOWN
}

func (x *CheckResults_ObjectResult) GetFailureMessages() []string {
	if x != nil {
		return x.FailureMessages
	}
	return nil
}

type Path_Step struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Selector:
	//
	//	*Path_Step_AttributeName
	//	*Path_Step_ElementKey
	Selector      isPath_Step_Selector `protobuf_oneof:"selector"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Path_Step) Reset() {
	*x = Path_Step{}
	mi := &file_planfile_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Path_Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Path_Step) ProtoMessage() {}

func (x *Path_Step) ProtoReflect() protoreflect.Message {
	mi := &file_planfile_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Path_Step.ProtoReflect.Descriptor instead.
func (*Path_Step) Descriptor() ([]byte, []int) {
	return file_planfile_proto_rawDescGZIP(), []int{12, 0}
}

func (x *Path_Step) GetSelector() isPath_Step_Selector {
	if x != nil {
		return x.Selector
	}
	return nil
}

func (x *Path_Step) GetAttributeName() string {
	if x != nil {
		if x, ok := x.Selector.(*Path_Step_AttributeName); ok {
			return x.AttributeName
		}
	}
	return ""
}

func (x *Path_Step) GetElementKey() *DynamicValue {
	if x != nil {
		if x, ok := x.Selector.(*Path_Step_ElementKey); ok {
			return x.ElementKey
		}
	}
	return nil
}

type isPath_Step_Selector interface {
	isPath_Step_Selector()
}

type Path_Step_AttributeName struct {
	// Set "attribute_name" to represent looking up an attribute
	// in the current object value.
	AttributeName string `protobuf:"bytes,1,opt,name=attribute_name,json=attributeName,proto3,oneof"`
}

type Path_Step_ElementKey struct {
	// Set "element_key" to represent looking up an element in
	// an indexable collection type.
	ElementKey *DynamicValue `protobuf:"bytes,2,opt,name=element_key,json=elementKey,proto3,oneof"`
}

func (*Path_Step_AttributeName) isPath_Step_Selector() {}

func (*Path_Step_ElementKey) isPath_Step_Selector() {}

var File_planfile_proto protoreflect.FileDescriptor

const file_planfile_proto_rawDesc = "" +
	"\n" +
	"\x0eplanfile.proto\x12\x06tfplan\"\xfb\n" +
	"\n" +
	"\x04Plan\x12\x18\n" +
	"\aversion\x18\x01 \x01(\x04R\aversion\x12%\n" +
	"\aui_mode\x18\x11 \x01(\x0e2\f.tfplan.ModeR\x06uiMode\x12\x1c\n" +
	"\tapplyable\x18\x19 \x01(\bR\tapplyable\x12\x1a\n" +
	"\bcomplete\x18\x1a \x01(\bR\bcomplete\x12\x18\n" +
	"\aerrored\x18\x14 \x01(\bR\aerrored\x129\n" +
	"\tvariables\x18\x02 \x03(\v2\x1b.tfplan.Plan.VariablesEntryR\tvariables\x120\n" +
	"\x14apply_time_variables\x18\x1c \x03(\tR\x12applyTimeVariables\x12I\n" +
	"\x10resource_changes\x18\x03 \x03(\v2\x1e.tfplan.ResourceInstanceChangeR\x0fresourceChanges\x12E\n" +
	"\x0eresource_drift\x18\x12 \x03(\v2\x1e.tfplan.ResourceInstanceChangeR\rresourceDrift\x12Q\n" +
	"\x10deferred_changes\x18\x1b \x03(\v2&.tfplan.DeferredResourceInstanceChangeR\x0fdeferredChanges\x12`\n" +
	"\x1bdeferred_action_invocations\x18\x1f \x03(\v2 .tfplan.DeferredActionInvocationR\x19deferredActionInvocations\x12;\n" +
	"\x0eoutput_changes\x18\x04 \x03(\v2\x14.tfplan.OutputChangeR\routputChanges\x129\n" +
	"\rcheck_results\x18\x13 \x03(\v2\x14.tfplan.CheckResultsR\fcheckResults\x12O\n" +
	"\x12action_invocations\x18\x1e \x03(\v2 .tfplan.ActionInvocationInstanceR\x11actionInvocations\x12!\n" +
	"\ftarget_addrs\x18\x05 \x03(\tR\vtargetAddrs\x12.\n" +
	"\x13action_target_addrs\x18  \x03(\tR\x11actionTargetAddrs\x12.\n" +
	"\x13force_replace_addrs\x18\x10 \x03(\tR\x11forceReplaceAddrs\x12+\n" +
	"\x11terraform_version\x18\x0e \x01(\tR\x10terraformVersion\x12)\n" +
	"\abackend\x18\r \x01(\v2\x0f.tfplan.BackendR\abackend\x123\n" +
	"\vstate_store\x18\x1d \x01(\v2\x12.tfplan.StateStoreR\n" +
	"stateStore\x12K\n" +
	"\x13relevant_attributes\x18\x0f \x03(\v2\x1a.tfplan.Plan.resource_attrR\x12relevantAttributes\x12\x1c\n" +
	"\ttimestamp\x18\x15 \x01(\tR\ttimestamp\x12C\n" +
	"\x10function_results\x18\x16 \x03(\v2\x18.tfplan.FunctionCallHashR\x0ffunctionResults\x1aR\n" +
	"\x0eVariablesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\v2\x14.tfplan.DynamicValueR\x05value:\x028\x01\x1aM\n" +
	"\rresource_attr\x12\x1a\n" +
	"\bresource\x18\x01 \x01(\tR\bresource\x12 \n" +
	"\x04attr\x18\x02 \x01(\v2\f.tfplan.PathR\x04attr\"i\n" +
	"\aBackend\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12,\n" +
	"\x06config\x18\x02 \x01(\v2\x14.tfplan.DynamicValueR\x06config\x12\x1c\n" +
	"\tworkspace\x18\x03 \x01(\tR\tworkspace\"\x9a\x01\n" +
	"\n" +
	"StateStore\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12,\n" +
	"\x06config\x18\x02 \x01(\v2\x14.tfplan.DynamicValueR\x06config\x12\x1c\n" +
	"\tworkspace\x18\x03 \x01(\tR\tworkspace\x12,\n" +
	"\bprovider\x18\x04 \x01(\v2\x10.tfplan.ProviderR\bprovider\"<\n" +
	"\bProvider\x12\x16\n" +
	"\x06source\x18\x01 \x01(\tR\x06source\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\"\xbc\x03\n" +
	"\x06Change\x12&\n" +
	"\x06action\x18\x01 \x01(\x0e2\x0e.tfplan.ActionR\x06action\x12,\n" +
	"\x06values\x18\x02 \x03(\v2\x14.tfplan.DynamicValueR\x06values\x12B\n" +
	"\x16before_sensitive_paths\x18\x03 \x03(\v2\f.tfplan.PathR\x14beforeSensitivePaths\x12@\n" +
	"\x15after_sensitive_paths\x18\x04 \x03(\v2\f.tfplan.PathR\x13afterSensitivePaths\x12/\n" +
	"\timporting\x18\x05 \x01(\v2\x11.tfplan.ImportingR\timporting\x12)\n" +
	"\x10generated_config\x18\x06 \x01(\tR\x0fgeneratedConfig\x12=\n" +
	"\x0fbefore_identity\x18\a \x01(\v2\x14.tfplan.DynamicValueR\x0ebeforeIdentity\x12;\n" +
	"\x0eafter_identity\x18\b \x01(\v2\x14.tfplan.DynamicValueR\rafterIdentity\"\xd3\x02\n" +
	"\x16ResourceInstanceChange\x12\x12\n" +
	"\x04addr\x18\r \x01(\tR\x04addr\x12\"\n" +
	"\rprev_run_addr\x18\x0e \x01(\tR\vprevRunAddr\x12\x1f\n" +
	"\vdeposed_key\x18\a \x01(\tR\n" +
	"deposedKey\x12\x1a\n" +
	"\bprovider\x18\b \x01(\tR\bprovider\x12&\n" +
	"\x06change\x18\t \x01(\v2\x0e.tfplan.ChangeR\x06change\x12\x18\n" +
	"\aprivate\x18\n" +
	" \x01(\fR\aprivate\x127\n" +
	"\x10required_replace\x18\v \x03(\v2\f.tfplan.PathR\x0frequiredReplace\x12I\n" +
	"\raction_reason\x18\f \x01(\x0e2$.tfplan.ResourceInstanceActionReasonR\factionReason\"\x86\x01\n" +
	"\x1eDeferredResourceInstanceChange\x12,\n" +
	"\bdeferred\x18\x01 \x01(\v2\x10.tfplan.DeferredR\bdeferred\x126\n" +
	"\x06change\x18\x02 \x01(\v2\x1e.tfplan.ResourceInstanceChangeR\x06change\"\x97\x01\n" +
	"\x18DeferredActionInvocation\x12,\n" +
	"\bdeferred\x18\x01 \x01(\v2\x10.tfplan.DeferredR\bdeferred\x12M\n" +
	"\x11action_invocation\x18\x02 \x01(\v2 .tfplan.ActionInvocationInstanceR\x10actionInvocation\"h\n" +
	"\fOutputChange\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12&\n" +
	"\x06change\x18\x02 \x01(\v2\x0e.tfplan.ChangeR\x06change\x12\x1c\n" +
	"\tsensitive\x18\x03 \x01(\bR\tsensitive\"\xfc\x03\n" +
	"\fCheckResults\x123\n" +
	"\x04kind\x18\x01 \x01(\x0e2\x1f.tfplan.CheckResults.ObjectKindR\x04kind\x12\x1f\n" +
	"\vconfig_addr\x18\x02 \x01(\tR\n" +
	"configAddr\x123\n" +
	"\x06status\x18\x03 \x01(\x0e2\x1b.tfplan.CheckResults.StatusR\x06status\x12;\n" +
	"\aobjects\x18\x04 \x03(\v2!.tfplan.CheckResults.ObjectResultR\aobjects\x1a\x8f\x01\n" +
	"\fObjectResult\x12\x1f\n" +
	"\vobject_addr\x18\x01 \x01(\tR\n" +
	"objectAddr\x123\n" +
	"\x06status\x18\x02 \x01(\x0e2\x1b.tfplan.CheckResults.StatusR\x06status\x12)\n" +
	"\x10failure_messages\x18\x03 \x03(\tR\x0ffailureMessages\"4\n" +
	"\x06Status\x12\v\n" +
	"\aUNKNOWN\x10\x00\x12\b\n" +
	"\x04PASS\x10\x01\x12\b\n" +
	"\x04FAIL\x10\x02\x12\t\n" +
	"\x05ERROR\x10\x03\"\\\n" +
	"\n" +
	"ObjectKind\x12\x0f\n" +
	"\vUNSPECIFIED\x10\x00\x12\f\n" +
	"\bRESOURCE\x10\x01\x12\x10\n" +
	"\fOUTPUT_VALUE\x10\x02\x12\t\n" +
	"\x05CHECK\x10\x03\x12\x12\n" +
	"\x0eINPUT_VARIABLE\x10\x04\"<\n" +
	"\x10FunctionCallHash\x12\x10\n" +
	"\x03key\x18\x01 \x01(\fR\x03key\x12\x16\n" +
	"\x06result\x18\x02 \x01(\fR\x06result\"(\n" +
	"\fDynamicValue\x12\x18\n" +
	"\amsgpack\x18\x01 \x01(\fR\amsgpack\"\xa5\x01\n" +
	"\x04Path\x12'\n" +
	"\x05steps\x18\x01 \x03(\v2\x11.tfplan.Path.StepR\x05steps\x1at\n" +
	"\x04Step\x12'\n" +
	"\x0eattribute_name\x18\x01 \x01(\tH\x00R\rattributeName\x127\n" +
	"\velement_key\x18\x02 \x01(\v2\x14.tfplan.DynamicValueH\x00R\n" +
	"elementKeyB\n" +
	"\n" +
	"\bselector\"g\n" +
	"\tImporting\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x18\n" +
	"\aunknown\x18\x02 \x01(\bR\aunknown\x120\n" +
	"\bidentity\x18\x03 \x01(\v2\x14.tfplan.DynamicValueR\bidentity\":\n" +
	"\bDeferred\x12.\n" +
	"\x06reason\x18\x01 \x01(\x0e2\x16.tfplan.DeferredReasonR\x06reason\"\x88\x03\n" +
	"\x18ActionInvocationInstance\x12\x12\n" +
	"\x04addr\x18\x01 \x01(\tR\x04addr\x12\x1a\n" +
	"\bprovider\x18\x02 \x01(\tR\bprovider\x127\n" +
	"\fconfig_value\x18\x04 \x01(\v2\x14.tfplan.DynamicValueR\vconfigValue\x12B\n" +
	"\x16sensitive_config_paths\x18\x05 \x03(\v2\f.tfplan.PathR\x14sensitiveConfigPaths\x12Z\n" +
	"\x18lifecycle_action_trigger\x18\x06 \x01(\v2\x1e.tfplan.LifecycleActionTriggerH\x00R\x16lifecycleActionTrigger\x12Q\n" +
	"\x15invoke_action_trigger\x18\a \x01(\v2\x1b.tfplan.InvokeActionTriggerH\x00R\x13invokeActionTriggerB\x10\n" +
	"\x0eaction_trigger\"\xfe\x01\n" +
	"\x16LifecycleActionTrigger\x128\n" +
	"\x18triggering_resource_addr\x18\x01 \x01(\tR\x16triggeringResourceAddr\x12?\n" +
	"\rtrigger_event\x18\x02 \x01(\x0e2\x1a.tfplan.ActionTriggerEventR\ftriggerEvent\x12;\n" +
	"\x1aaction_trigger_block_index\x18\x03 \x01(\x03R\x17actionTriggerBlockIndex\x12,\n" +
	"\x12actions_list_index\x18\x04 \x01(\x03R\x10actionsListIndex\"\x15\n" +
	"\x13InvokeActionTrigger\"{\n" +
	"\x1cResourceInstanceActionChange\x12\x12\n" +
	"\x04addr\x18\x01 \x01(\tR\x04addr\x12\x1f\n" +
	"\vdeposed_key\x18\x02 \x01(\tR\n" +
	"deposedKey\x12&\n" +
	"\x06change\x18\x03 \x01(\v2\x0e.tfplan.ChangeR\x06change*1\n" +
	"\x04Mode\x12\n" +
	"\n" +
	"\x06NORMAL\x10\x00\x12\v\n" +
	"\aDESTROY\x10\x01\x12\x10\n" +
	"\fREFRESH_ONLY\x10\x02*\x94\x01\n" +
	"\x06Action\x12\b\n" +
	"\x04NOOP\x10\x00\x12\n" +
	"\n" +
	"\x06CREATE\x10\x01\x12\b\n" +
	"\x04READ\x10\x02\x12\n" +
	"\n" +
	"\x06UPDATE\x10\x03\x12\n" +
	"\n" +
	"\x06DELETE\x10\x05\x12\x16\n" +
	"\x12DELETE_THEN_CREATE\x10\x06\x12\x16\n" +
	"\x12CREATE_THEN_DELETE\x10\a\x12\n" +
	"\n" +
	"\x06FORGET\x10\b\x12\x16\n" +
	"\x12CREATE_THEN_FORGET\x10\t*\xc8\x03\n" +
	"\x1cResourceInstanceActionReason\x12\b\n" +
	"\x04NONE\x10\x00\x12\x1b\n" +
	"\x17REPLACE_BECAUSE_TAINTED\x10\x01\x12\x16\n" +
	"\x12REPLACE_BY_REQUEST\x10\x02\x12!\n" +
	"\x1dREPLACE_BECAUSE_CANNOT_UPDATE\x10\x03\x12%\n" +
	"!DELETE_BECAUSE_NO_RESOURCE_CONFIG\x10\x04\x12#\n" +
	"\x1fDELETE_BECAUSE_WRONG_REPETITION\x10\x05\x12\x1e\n" +
	"\x1aDELETE_BECAUSE_COUNT_INDEX\x10\x06\x12\x1b\n" +
	"\x17DELETE_BECAUSE_EACH_KEY\x10\a\x12\x1c\n" +
	"\x18DELETE_BECAUSE_NO_MODULE\x10\b\x12\x17\n" +
	"\x13REPLACE_BY_TRIGGERS\x10\t\x12\x1f\n" +
	"\x1bREAD_BECAUSE_CONFIG_UNKNOWN\x10\n" +
	"\x12#\n" +
	"\x1fREAD_BECAUSE_DEPENDENCY_PENDING\x10\v\x12\x1d\n" +
	"\x19READ_BECAUSE_CHECK_NESTED\x10\r\x12!\n" +
	"\x1dDELETE_BECAUSE_NO_MOVE_TARGET\x10\f*\x9b\x01\n" +
	"\x0eDeferredReason\x12\v\n" +
	"\aINVALID\x10\x00\x12\x1a\n" +
	"\x16INSTANCE_COUNT_UNKNOWN\x10\x01\x12\x1b\n" +
	"\x17RESOURCE_CONFIG_UNKNOWN\x10\x02\x12\x1b\n" +
	"\x17PROVIDER_CONFIG_UNKNOWN\x10\x03\x12\x11\n" +
	"\rABSENT_PREREQ\x10\x04\x12\x13\n" +
	"\x0fDEFERRED_PREREQ\x10\x05*\xa4\x01\n" +
	"\x12ActionTriggerEvent\x12\x11\n" +
	"\rINVALID_EVENT\x10\x00\x12\x11\n" +
	"\rBEFORE_CERATE\x10\x01\x12\x10\n" +
	"\fAFTER_CREATE\x10\x02\x12\x11\n" +
	"\rBEFORE_UPDATE\x10\x03\x12\x10\n" +
	"\fAFTER_UPDATE\x10\x04\x12\x12\n" +
	"\x0eBEFORE_DESTROY\x10\x05\x12\x11\n" +
	"\rAFTER_DESTROY\x10\x06\x12\n" +
	"\n" +
	"\x06INVOKE\x10\aB9Z7github.com/hashicorp/terraform/internal/plans/planprotob\x06proto3"

var (
	file_planfile_proto_rawDescOnce sync.Once
	file_planfile_proto_rawDescData []byte
)

func file_planfile_proto_rawDescGZIP() []byte {
	file_planfile_proto_rawDescOnce.Do(func() {
		file_planfile_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_planfile_proto_rawDesc), len(file_planfile_proto_rawDesc)))
	})
	return file_planfile_proto_rawDescData
}

var file_planfile_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_planfile_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_planfile_proto_goTypes = []any{
	(Mode)(0),                              // 0: tfplan.Mode
	(Action)(0),                            // 1: tfplan.Action
	(ResourceInstanceActionReason)(0),      // 2: tfplan.ResourceInstanceActionReason
	(DeferredReason)(0),                    // 3: tfplan.DeferredReason
	(ActionTriggerEvent)(0),                // 4: tfplan.ActionTriggerEvent
	(CheckResults_Status)(0),               // 5: tfplan.CheckResults.Status
	(CheckResults_ObjectKind)(0),           // 6: tfplan.CheckResults.ObjectKind
	(*Plan)(nil),                           // 7: tfplan.Plan
	(*Backend)(nil),                        // 8: tfplan.Backend
	(*StateStore)(nil),                     // 9: tfplan.StateStore
	(*Provider)(nil),                       // 10: tfplan.Provider
	(*Change)(nil),                         // 11: tfplan.Change
	(*ResourceInstanceChange)(nil),         // 12: tfplan.ResourceInstanceChange
	(*DeferredResourceInstanceChange)(nil), // 13: tfplan.DeferredResourceInstanceChange
	(*DeferredActionInvocation)(nil),       // 14: tfplan.DeferredActionInvocation
	(*OutputChange)(nil),                   // 15: tfplan.OutputChange
	(*CheckResults)(nil),                   // 16: tfplan.CheckResults
	(*FunctionCallHash)(nil),               // 17: tfplan.FunctionCallHash
	(*DynamicValue)(nil),                   // 18: tfplan.DynamicValue
	(*Path)(nil),                           // 19: tfplan.Path
	(*Importing)(nil),                      // 20: tfplan.Importing
	(*Deferred)(nil),                       // 21: tfplan.Deferred
	(*ActionInvocationInstance)(nil),       // 22: tfplan.ActionInvocationInstance
	(*LifecycleActionTrigger)(nil),         // 23: tfplan.LifecycleActionTrigger
	(*InvokeActionTrigger)(nil),            // 24: tfplan.InvokeActionTrigger
	(*ResourceInstanceActionChange)(nil),   // 25: tfplan.ResourceInstanceActionChange
	nil,                                    // 26: tfplan.Plan.VariablesEntry
	(*PlanResourceAttr)(nil),               // 27: tfplan.Plan.resource_attr
	(*CheckResults_ObjectResult)(nil),      // 28: tfplan.CheckResults.ObjectResult
	(*Path_Step)(nil),                      // 29: tfplan.Path.Step
}
var file_planfile_proto_depIdxs = []int32{
	0,  // 0: tfplan.Plan.ui_mode:type_name -> tfplan.Mode
	26, // 1: tfplan.Plan.variables:type_name -> tfplan.Plan.VariablesEntry
	12, // 2: tfplan.Plan.resource_changes:type_name -> tfplan.ResourceInstanceChange
	12, // 3: tfplan.Plan.resource_drift:type_name -> tfplan.ResourceInstanceChange
	13, // 4: tfplan.Plan.deferred_changes:type_name -> tfplan.DeferredResourceInstanceChange
	14, // 5: tfplan.Plan.deferred_action_invocations:type_name -> tfplan.DeferredActionInvocation
	15, // 6: tfplan.Plan.output_changes:type_name -> tfplan.OutputChange
	16, // 7: tfplan.Plan.check_results:type_name -> tfplan.CheckResults
	22, // 8: tfplan.Plan.action_invocations:type_name -> tfplan.ActionInvocationInstance
	8,  // 9: tfplan.Plan.backend:type_name -> tfplan.Backend
	9,  // 10: tfplan.Plan.state_store:type_name -> tfplan.StateStore
	27, // 11: tfplan.Plan.relevant_attributes:type_name -> tfplan.Plan.resource_attr
	17, // 12: tfplan.Plan.function_results:type_name -> tfplan.FunctionCallHash
	18, // 13: tfplan.Backend.config:type_name -> tfplan.DynamicValue
	18, // 14: tfplan.StateStore.config:type_name -> tfplan.DynamicValue
	10, // 15: tfplan.StateStore.provider:type_name -> tfplan.Provider
	1,  // 16: tfplan.Change.action:type_name -> tfplan.Action
	18, // 17: tfplan.Change.values:type_name -> tfplan.DynamicValue
	19, // 18: tfplan.Change.before_sensitive_paths:type_name -> tfplan.Path
	19, // 19: tfplan.Change.after_sensitive_paths:type_name -> tfplan.Path
	20, // 20: tfplan.Change.importing:type_name -> tfplan.Importing
	18, // 21: tfplan.Change.before_identity:type_name -> tfplan.DynamicValue
	18, // 22: tfplan.Change.after_identity:type_name -> tfplan.DynamicValue
	11, // 23: tfplan.ResourceInstanceChange.change:type_name -> tfplan.Change
	19, // 24: tfplan.ResourceInstanceChange.required_replace:type_name -> tfplan.Path
	2,  // 25: tfplan.ResourceInstanceChange.action_reason:type_name -> tfplan.ResourceInstanceActionReason
	21, // 26: tfplan.DeferredResourceInstanceChange.deferred:type_name -> tfplan.Deferred
	12, // 27: tfplan.DeferredResourceInstanceChange.change:type_name -> tfplan.ResourceInstanceChange
	21, // 28: tfplan.DeferredActionInvocation.deferred:type_name -> tfplan.Deferred
	22, // 29: tfplan.DeferredActionInvocation.action_invocation:type_name -> tfplan.ActionInvocationInstance
	11, // 30: tfplan.OutputChange.change:type_name -> tfplan.Change
	6,  // 31: tfplan.CheckResults.kind:type_name -> tfplan.CheckResults.ObjectKind
	5,  // 32: tfplan.CheckResults.status:type_name -> tfplan.CheckResults.Status
	28, // 33: tfplan.CheckResults.objects:type_name -> tfplan.CheckResults.ObjectResult
	29, // 34: tfplan.Path.steps:type_name -> tfplan.Path.Step
	18, // 35: tfplan.Importing.identity:type_name -> tfplan.DynamicValue
	3,  // 36: tfplan.Deferred.reason:type_name -> tfplan.DeferredReason
	18, // 37: tfplan.ActionInvocationInstance.config_value:type_name -> tfplan.DynamicValue
	19, // 38: tfplan.ActionInvocationInstance.sensitive_config_paths:type_name -> tfplan.Path
	23, // 39: tfplan.ActionInvocationInstance.lifecycle_action_trigger:type_name -> tfplan.LifecycleActionTrigger
	24, // 40: tfplan.ActionInvocationInstance.invoke_action_trigger:type_name -> tfplan.InvokeActionTrigger
	4,  // 41: tfplan.LifecycleActionTrigger.trigger_event:type_name -> tfplan.ActionTriggerEvent
	11, // 42: tfplan.ResourceInstanceActionChange.change:type_name -> tfplan.Change
	18, // 43: tfplan.Plan.VariablesEntry.value:type_name -> tfplan.DynamicValue
	19, // 44: tfplan.Plan.resource_attr.attr:type_name -> tfplan.Path
	5,  // 45: tfplan.CheckResults.ObjectResult.status:type_name -> tfplan.CheckResults.Status
	18, // 46: tfplan.Path.Step.element_key:type_name -> tfplan.DynamicValue
	47, // [47:47] is the sub-list for method output_type
	47, // [47:47] is the sub-list for method input_type
	47, // [47:47] is the sub-list for extension type_name
	47, // [47:47] is the sub-list for extension extendee
	0,  // [0:47] is the sub-list for field type_name
}

func init() { file_planfile_proto_init() }
func file_planfile_proto_init() {
	if File_planfile_proto != nil {
		return
	}
	file_planfile_proto_msgTypes[15].OneofWrappers = []any{
		(*ActionInvocationInstance_LifecycleActionTrigger)(nil),
		(*ActionInvocationInstance_InvokeActionTrigger)(nil),
	}
	file_planfile_proto_msgTypes[22].OneofWrappers = []any{
		(*Path_Step_AttributeName)(nil),
		(*Path_Step_ElementKey)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_planfile_proto_rawDesc), len(file_planfile_proto_rawDesc)),
			NumEnums:      7,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_planfile_proto_goTypes,
		DependencyIndexes: file_planfile_proto_depIdxs,
		EnumInfos:         file_planfile_proto_enumTypes,
		MessageInfos:      file_planfile_proto_msgTypes,
	}.Build()
	File_planfile_proto = out.File
	file_planfile_proto_goTypes = nil
	file_planfile_proto_depIdxs = nil
}
